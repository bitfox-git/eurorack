ARM GAS  /var/folders/k_/r2bh2pj93_jff4n9gmtn9jvr0000gn/T//ccVqBKYL.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"pitch.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.Yin_difference,"ax",%progbits
  18              		.align	1
  19              		.global	Yin_difference
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	Yin_difference:
  26              	.LFB126:
  27              		.file 1 "Src/pitch.c"
   1:Src/pitch.c   **** #include <math.h>
   2:Src/pitch.c   **** #include "pitch.h"
   3:Src/pitch.c   **** #include <stdint.h>
   4:Src/pitch.c   **** #include <stdbool.h>
   5:Src/pitch.c   **** #include "ssd1306.h"
   6:Src/pitch.c   **** 
   7:Src/pitch.c   **** // #include "kiss_fft.h"
   8:Src/pitch.c   **** // #include "_kiss_fft_guts.h"
   9:Src/pitch.c   **** // #include "kiss_fftr.h"
  10:Src/pitch.c   **** 
  11:Src/pitch.c   **** // #include "audiodata.h"
  12:Src/pitch.c   **** 
  13:Src/pitch.c   **** Yin yinobject;
  14:Src/pitch.c   **** 
  15:Src/pitch.c   **** /* ------------------------------------------------------------------------------------------
  16:Src/pitch.c   **** --------------------------------------------------------------------------- PRIVATE FUNCTIONS
  17:Src/pitch.c   **** -------------------------------------------------------------------------------------------*/
  18:Src/pitch.c   **** 
  19:Src/pitch.c   **** /**
  20:Src/pitch.c   ****  * Step 1: Calculates the squared difference of the signal with a shifted version of itself.
  21:Src/pitch.c   ****  * @param buffer Buffer of samples to process. 
  22:Src/pitch.c   ****  *
  23:Src/pitch.c   ****  * This is the Yin algorithms tweak on autocorellation. Read http://audition.ens.fr/adc/pdf/2002_JA
  24:Src/pitch.c   ****  * for more details on what is in here and why it's done this way.
  25:Src/pitch.c   ****  */
  26:Src/pitch.c   **** void Yin_difference(Yin *yin, float* buffer){
  28              		.loc 1 26 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
ARM GAS  /var/folders/k_/r2bh2pj93_jff4n9gmtn9jvr0000gn/T//ccVqBKYL.s 			page 2


  33              	.LVL0:
  34 0000 70B4     		push	{r4, r5, r6}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 12
  37              		.cfi_offset 4, -12
  38              		.cfi_offset 5, -8
  39              		.cfi_offset 6, -4
  40              	.LVL1:
  27:Src/pitch.c   **** 	int16_t i;
  28:Src/pitch.c   **** 	int16_t tau;
  29:Src/pitch.c   **** 	float delta;
  30:Src/pitch.c   ****   
  31:Src/pitch.c   ****   // uint16_t d = MAXIMUM_SAMPLESIZE / yin->bufferSize;
  32:Src/pitch.c   **** 
  33:Src/pitch.c   **** 	/* Calculate the difference for difference shift values (tau) for the half of the samples */
  34:Src/pitch.c   **** 	for(tau = 0 ; tau < yin->halfBufferSize; tau++){
  41              		.loc 1 34 0
  42 0002 0026     		movs	r6, #0
  43 0004 1AE0     		b	.L2
  44              	.LVL2:
  45              	.L4:
  35:Src/pitch.c   ****     yin->yinBuffer[tau] = 0;
  36:Src/pitch.c   **** 		/* Take the difference of the signal with a shifted version of itself, then square it.
  37:Src/pitch.c   **** 		 * (This is the Yin algorithm's tweak on autocorellation) */ 
  38:Src/pitch.c   **** 		for(i = 0; i < yin->halfBufferSize; i++){
  39:Src/pitch.c   **** 			delta = buffer[i] - buffer[(i + tau)];
  46              		.loc 1 39 0 discriminator 3
  47 0006 01EB8302 		add	r2, r1, r3, lsl #2
  48 000a D2ED007A 		vldr.32	s15, [r2]
  49 000e 1A19     		adds	r2, r3, r4
  50 0010 01EB8202 		add	r2, r1, r2, lsl #2
  51 0014 92ED007A 		vldr.32	s14, [r2]
  52 0018 77EEC77A 		vsub.f32	s15, s15, s14
  53              	.LVL3:
  40:Src/pitch.c   **** 			yin->yinBuffer[tau] += delta * delta;
  54              		.loc 1 40 0 discriminator 3
  55 001c 67EEA77A 		vmul.f32	s15, s15, s15
  56              	.LVL4:
  57 0020 00EB8402 		add	r2, r0, r4, lsl #2
  58 0024 92ED017A 		vldr.32	s14, [r2, #4]
  59              	.LVL5:
  60 0028 77EE277A 		vadd.f32	s15, s14, s15
  61 002c C2ED017A 		vstr.32	s15, [r2, #4]
  62              	.LVL6:
  38:Src/pitch.c   **** 			delta = buffer[i] - buffer[(i + tau)];
  63              		.loc 1 38 0 discriminator 3
  64 0030 0133     		adds	r3, r3, #1
  65              	.LVL7:
  66 0032 1BB2     		sxth	r3, r3
  67              	.LVL8:
  68              	.L3:
  38:Src/pitch.c   **** 			delta = buffer[i] - buffer[(i + tau)];
  69              		.loc 1 38 0 is_stmt 0 discriminator 1
  70 0034 9D42     		cmp	r5, r3
  71 0036 E6DC     		bgt	.L4
  34:Src/pitch.c   ****     yin->yinBuffer[tau] = 0;
  72              		.loc 1 34 0 is_stmt 1 discriminator 2
ARM GAS  /var/folders/k_/r2bh2pj93_jff4n9gmtn9jvr0000gn/T//ccVqBKYL.s 			page 3


  73 0038 0136     		adds	r6, r6, #1
  74              	.LVL9:
  75 003a 36B2     		sxth	r6, r6
  76              	.LVL10:
  77              	.L2:
  34:Src/pitch.c   ****     yin->yinBuffer[tau] = 0;
  78              		.loc 1 34 0 is_stmt 0 discriminator 1
  79 003c B0F90250 		ldrsh	r5, [r0, #2]
  80 0040 B542     		cmp	r5, r6
  81 0042 06DD     		ble	.L7
  35:Src/pitch.c   **** 		/* Take the difference of the signal with a shifted version of itself, then square it.
  82              		.loc 1 35 0 is_stmt 1
  83 0044 3446     		mov	r4, r6
  84 0046 00EB8603 		add	r3, r0, r6, lsl #2
  85 004a 0022     		movs	r2, #0
  86 004c 5A60     		str	r2, [r3, #4]	@ float
  87              	.LVL11:
  38:Src/pitch.c   **** 			delta = buffer[i] - buffer[(i + tau)];
  88              		.loc 1 38 0
  89 004e 0023     		movs	r3, #0
  90 0050 F0E7     		b	.L3
  91              	.LVL12:
  92              	.L7:
  41:Src/pitch.c   **** 		}
  42:Src/pitch.c   **** 	}
  43:Src/pitch.c   **** }
  93              		.loc 1 43 0
  94 0052 70BC     		pop	{r4, r5, r6}
  95              	.LCFI1:
  96              		.cfi_restore 6
  97              		.cfi_restore 5
  98              		.cfi_restore 4
  99              		.cfi_def_cfa_offset 0
 100              	.LVL13:
 101 0054 7047     		bx	lr
 102              		.cfi_endproc
 103              	.LFE126:
 105              		.section	.text.Yin_cumulativeMeanNormalizedDifference,"ax",%progbits
 106              		.align	1
 107              		.global	Yin_cumulativeMeanNormalizedDifference
 108              		.syntax unified
 109              		.thumb
 110              		.thumb_func
 111              		.fpu fpv4-sp-d16
 113              	Yin_cumulativeMeanNormalizedDifference:
 114              	.LFB127:
  44:Src/pitch.c   **** 
  45:Src/pitch.c   **** /**
  46:Src/pitch.c   ****  * Step 2: Calculate the cumulative mean on the normalised difference calculated in step 1
  47:Src/pitch.c   ****  * @param yin #Yin structure with information about the signal
  48:Src/pitch.c   ****  *
  49:Src/pitch.c   ****  * This goes through the Yin autocorellation values and finds out roughly where shift is which 
  50:Src/pitch.c   ****  * produced the smallest difference
  51:Src/pitch.c   ****  */
  52:Src/pitch.c   **** void Yin_cumulativeMeanNormalizedDifference(Yin *yin){
 115              		.loc 1 52 0
 116              		.cfi_startproc
ARM GAS  /var/folders/k_/r2bh2pj93_jff4n9gmtn9jvr0000gn/T//ccVqBKYL.s 			page 4


 117              		@ args = 0, pretend = 0, frame = 0
 118              		@ frame_needed = 0, uses_anonymous_args = 0
 119              		@ link register save eliminated.
 120              	.LVL14:
  53:Src/pitch.c   **** 	int16_t tau;
  54:Src/pitch.c   **** 	float runningSum = 0;
  55:Src/pitch.c   **** 	yin->yinBuffer[0] = 1;
 121              		.loc 1 55 0
 122 0000 4FF07E53 		mov	r3, #1065353216
 123 0004 4360     		str	r3, [r0, #4]	@ float
 124              	.LVL15:
  54:Src/pitch.c   **** 	yin->yinBuffer[0] = 1;
 125              		.loc 1 54 0
 126 0006 9FED0D7A 		vldr.32	s14, .L11
  56:Src/pitch.c   ****   
  57:Src/pitch.c   **** 
  58:Src/pitch.c   **** 	/* Sum all the values in the autocorellation buffer and nomalise the result, replacing
  59:Src/pitch.c   **** 	 * the value in the autocorellation buffer with a cumulative mean of the normalised difference */
  60:Src/pitch.c   **** 	for (tau = 1; tau < yin->halfBufferSize; tau++) {
 127              		.loc 1 60 0
 128 000a 0123     		movs	r3, #1
 129 000c 11E0     		b	.L9
 130              	.LVL16:
 131              	.L10:
  61:Src/pitch.c   **** 		runningSum += yin->yinBuffer[tau];
 132              		.loc 1 61 0 discriminator 3
 133 000e 00EB8302 		add	r2, r0, r3, lsl #2
 134 0012 D2ED017A 		vldr.32	s15, [r2, #4]
 135 0016 37EE277A 		vadd.f32	s14, s14, s15
 136              	.LVL17:
  62:Src/pitch.c   **** 		yin->yinBuffer[tau] *= tau / runningSum;
 137              		.loc 1 62 0 discriminator 3
 138 001a 06EE903A 		vmov	s13, r3	@ int
 139 001e B8EEE66A 		vcvt.f32.s32	s12, s13
 140 0022 C6EE076A 		vdiv.f32	s13, s12, s14
 141 0026 67EEA67A 		vmul.f32	s15, s15, s13
 142 002a C2ED017A 		vstr.32	s15, [r2, #4]
  60:Src/pitch.c   **** 		runningSum += yin->yinBuffer[tau];
 143              		.loc 1 60 0 discriminator 3
 144 002e 0133     		adds	r3, r3, #1
 145              	.LVL18:
 146 0030 1BB2     		sxth	r3, r3
 147              	.LVL19:
 148              	.L9:
  60:Src/pitch.c   **** 		runningSum += yin->yinBuffer[tau];
 149              		.loc 1 60 0 is_stmt 0 discriminator 1
 150 0032 B0F90220 		ldrsh	r2, [r0, #2]
 151 0036 9A42     		cmp	r2, r3
 152 0038 E9DC     		bgt	.L10
  63:Src/pitch.c   **** 	}
  64:Src/pitch.c   **** }
 153              		.loc 1 64 0 is_stmt 1
 154 003a 7047     		bx	lr
 155              	.L12:
 156              		.align	2
 157              	.L11:
 158 003c 00000000 		.word	0
ARM GAS  /var/folders/k_/r2bh2pj93_jff4n9gmtn9jvr0000gn/T//ccVqBKYL.s 			page 5


 159              		.cfi_endproc
 160              	.LFE127:
 162              		.section	.text.Yin_absoluteThreshold,"ax",%progbits
 163              		.align	1
 164              		.global	Yin_absoluteThreshold
 165              		.syntax unified
 166              		.thumb
 167              		.thumb_func
 168              		.fpu fpv4-sp-d16
 170              	Yin_absoluteThreshold:
 171              	.LFB128:
  65:Src/pitch.c   **** 
  66:Src/pitch.c   **** /**
  67:Src/pitch.c   ****  * Step 3: Search through the normalised cumulative mean array and find values that are over the th
  68:Src/pitch.c   ****  * @return Shift (tau) which caused the best approximate autocorellation. -1 if no suitable value i
  69:Src/pitch.c   ****  */
  70:Src/pitch.c   **** int16_t Yin_absoluteThreshold(Yin *yin){
 172              		.loc 1 70 0
 173              		.cfi_startproc
 174              		@ args = 0, pretend = 0, frame = 0
 175              		@ frame_needed = 0, uses_anonymous_args = 0
 176              		@ link register save eliminated.
 177              	.LVL20:
 178 0000 10B4     		push	{r4}
 179              	.LCFI2:
 180              		.cfi_def_cfa_offset 4
 181              		.cfi_offset 4, -4
 182              	.LVL21:
  71:Src/pitch.c   **** 	int16_t tau;
  72:Src/pitch.c   **** 
  73:Src/pitch.c   **** 	/* Search through the array of cumulative mean values, and look for ones that are over the thresho
  74:Src/pitch.c   **** 	 * The first two positions in yinBuffer are always so start at the third (index 2) */
  75:Src/pitch.c   **** 	for (tau = 2; tau < yin->halfBufferSize ; tau++) {
 183              		.loc 1 75 0
 184 0002 0223     		movs	r3, #2
 185              	.LVL22:
 186              	.L14:
 187              		.loc 1 75 0 is_stmt 0 discriminator 1
 188 0004 B0F90220 		ldrsh	r2, [r0, #2]
 189 0008 9A42     		cmp	r2, r3
 190 000a 2FDD     		ble	.L19
  76:Src/pitch.c   **** 		if (yin->yinBuffer[tau] < yin->threshold) {
 191              		.loc 1 76 0 is_stmt 1
 192 000c 00EB8301 		add	r1, r0, r3, lsl #2
 193 0010 91ED017A 		vldr.32	s14, [r1, #4]
 194 0014 00F60801 		addw	r1, r0, #2056
 195 0018 D1ED007A 		vldr.32	s15, [r1]
 196 001c B4EEE77A 		vcmpe.f32	s14, s15
 197 0020 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 198 0024 02D4     		bmi	.L15
  75:Src/pitch.c   **** 		if (yin->yinBuffer[tau] < yin->threshold) {
 199              		.loc 1 75 0 discriminator 2
 200 0026 0133     		adds	r3, r3, #1
 201              	.LVL23:
 202 0028 1BB2     		sxth	r3, r3
 203              	.LVL24:
 204 002a EBE7     		b	.L14
ARM GAS  /var/folders/k_/r2bh2pj93_jff4n9gmtn9jvr0000gn/T//ccVqBKYL.s 			page 6


 205              	.L15:
  77:Src/pitch.c   **** 			while (tau + 1 < yin->halfBufferSize && yin->yinBuffer[tau + 1] < yin->yinBuffer[tau]) {
 206              		.loc 1 77 0
 207 002c 1C46     		mov	r4, r3
 208 002e 591C     		adds	r1, r3, #1
 209 0030 9142     		cmp	r1, r2
 210 0032 0FDA     		bge	.L17
 211              		.loc 1 77 0 is_stmt 0 discriminator 1
 212 0034 00EB8101 		add	r1, r0, r1, lsl #2
 213 0038 91ED017A 		vldr.32	s14, [r1, #4]
 214 003c 00EB8301 		add	r1, r0, r3, lsl #2
 215 0040 D1ED017A 		vldr.32	s15, [r1, #4]
 216 0044 B4EEE77A 		vcmpe.f32	s14, s15
 217 0048 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 218 004c 02D5     		bpl	.L17
  78:Src/pitch.c   **** 				tau++;
 219              		.loc 1 78 0 is_stmt 1
 220 004e 0133     		adds	r3, r3, #1
 221              	.LVL25:
 222 0050 1BB2     		sxth	r3, r3
 223              	.LVL26:
 224 0052 EBE7     		b	.L15
 225              	.L17:
  79:Src/pitch.c   **** 			}
  80:Src/pitch.c   **** 			/* found tau, exit loop and return
  81:Src/pitch.c   **** 			 * store the probability
  82:Src/pitch.c   **** 			 * From the YIN paper: The yin->threshold determines the list of
  83:Src/pitch.c   **** 			 * candidates admitted to the set, and can be interpreted as the
  84:Src/pitch.c   **** 			 * proportion of aperiodic power tolerated
  85:Src/pitch.c   **** 			 * within a periodic signal.
  86:Src/pitch.c   **** 			 *
  87:Src/pitch.c   **** 			 * Since we want the periodicity and and not aperiodicity:
  88:Src/pitch.c   **** 			 * periodicity = 1 - aperiodicity */
  89:Src/pitch.c   **** 			yin->probability = 1 - yin->yinBuffer[tau];
 226              		.loc 1 89 0
 227 0054 00EB8404 		add	r4, r0, r4, lsl #2
 228 0058 94ED017A 		vldr.32	s14, [r4, #4]
 229 005c F7EE007A 		vmov.f32	s15, #1.0e+0
 230 0060 77EEC77A 		vsub.f32	s15, s15, s14
 231 0064 00F60401 		addw	r1, r0, #2052
 232 0068 C1ED007A 		vstr.32	s15, [r1]
 233              	.L19:
  90:Src/pitch.c   **** 			break;
  91:Src/pitch.c   **** 		}
  92:Src/pitch.c   **** 	}
  93:Src/pitch.c   **** 
  94:Src/pitch.c   **** 	/* if no pitch found, tau => -1 */
  95:Src/pitch.c   **** 	if (tau == yin->halfBufferSize || yin->yinBuffer[tau] >= yin->threshold) {
 234              		.loc 1 95 0
 235 006c 9A42     		cmp	r2, r3
 236 006e 10D0     		beq	.L21
 237              		.loc 1 95 0 is_stmt 0 discriminator 1
 238 0070 00EB8302 		add	r2, r0, r3, lsl #2
 239 0074 92ED017A 		vldr.32	s14, [r2, #4]
 240 0078 00F60802 		addw	r2, r0, #2056
 241 007c D2ED007A 		vldr.32	s15, [r2]
 242 0080 B4EEE77A 		vcmpe.f32	s14, s15
ARM GAS  /var/folders/k_/r2bh2pj93_jff4n9gmtn9jvr0000gn/T//ccVqBKYL.s 			page 7


 243 0084 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 244 0088 03DA     		bge	.L21
 245              	.LVL27:
 246              	.L22:
  96:Src/pitch.c   **** 		tau = -1;
  97:Src/pitch.c   **** 		yin->probability = 0;
  98:Src/pitch.c   **** 	}
  99:Src/pitch.c   **** 
 100:Src/pitch.c   **** 	return tau;
 101:Src/pitch.c   **** }
 247              		.loc 1 101 0 is_stmt 1
 248 008a 1846     		mov	r0, r3
 249 008c 5DF8044B 		ldr	r4, [sp], #4
 250              	.LCFI3:
 251              		.cfi_remember_state
 252              		.cfi_restore 4
 253              		.cfi_def_cfa_offset 0
 254 0090 7047     		bx	lr
 255              	.LVL28:
 256              	.L21:
 257              	.LCFI4:
 258              		.cfi_restore_state
  97:Src/pitch.c   **** 	}
 259              		.loc 1 97 0
 260 0092 00F60400 		addw	r0, r0, #2052
 261              	.LVL29:
 262 0096 0023     		movs	r3, #0
 263 0098 0360     		str	r3, [r0]	@ float
  96:Src/pitch.c   **** 		tau = -1;
 264              		.loc 1 96 0
 265 009a 4FF0FF33 		mov	r3, #-1
 266 009e F4E7     		b	.L22
 267              		.cfi_endproc
 268              	.LFE128:
 270              		.section	.text.Yin_parabolicInterpolation,"ax",%progbits
 271              		.align	1
 272              		.global	Yin_parabolicInterpolation
 273              		.syntax unified
 274              		.thumb
 275              		.thumb_func
 276              		.fpu fpv4-sp-d16
 278              	Yin_parabolicInterpolation:
 279              	.LFB129:
 102:Src/pitch.c   **** 
 103:Src/pitch.c   **** /**
 104:Src/pitch.c   ****  * Step 5: Interpolate the shift value (tau) to improve the pitch estimate.
 105:Src/pitch.c   ****  * @param  yin         [description]
 106:Src/pitch.c   ****  * @param  tauEstimate [description]
 107:Src/pitch.c   ****  * @return             [description]
 108:Src/pitch.c   ****  *
 109:Src/pitch.c   ****  * The 'best' shift value for autocorellation is most likely not an interger shift of the signal.
 110:Src/pitch.c   ****  * As we only autocorellated using integer shifts we should check that there isn't a better fractio
 111:Src/pitch.c   ****  * shift value.
 112:Src/pitch.c   ****  */
 113:Src/pitch.c   **** float Yin_parabolicInterpolation(Yin *yin, int16_t tauEstimate) {
 280              		.loc 1 113 0
 281              		.cfi_startproc
ARM GAS  /var/folders/k_/r2bh2pj93_jff4n9gmtn9jvr0000gn/T//ccVqBKYL.s 			page 8


 282              		@ args = 0, pretend = 0, frame = 0
 283              		@ frame_needed = 0, uses_anonymous_args = 0
 284              		@ link register save eliminated.
 285              	.LVL30:
 286 0000 10B4     		push	{r4}
 287              	.LCFI5:
 288              		.cfi_def_cfa_offset 4
 289              		.cfi_offset 4, -4
 114:Src/pitch.c   **** 	float betterTau;
 115:Src/pitch.c   **** 	int16_t x0;
 116:Src/pitch.c   **** 	int16_t x2;
 117:Src/pitch.c   **** 	
 118:Src/pitch.c   **** 	/* Calculate the first polynomial coeffcient based on the current estimate of tau */
 119:Src/pitch.c   **** 	if (tauEstimate < 1) {
 290              		.loc 1 119 0
 291 0002 0029     		cmp	r1, #0
 292              	.LVL31:
 293 0004 2CDD     		ble	.L36
 120:Src/pitch.c   **** 		x0 = tauEstimate;
 121:Src/pitch.c   **** 	} 
 122:Src/pitch.c   **** 	else {
 123:Src/pitch.c   **** 		x0 = tauEstimate - 1;
 294              		.loc 1 123 0
 295 0006 4B1E     		subs	r3, r1, #1
 296 0008 1BB2     		sxth	r3, r3
 297              	.LVL32:
 298              	.L27:
 124:Src/pitch.c   **** 	}
 125:Src/pitch.c   **** 
 126:Src/pitch.c   **** 	/* Calculate the second polynomial coeffcient based on the current estimate of tau */
 127:Src/pitch.c   **** 	if (tauEstimate + 1 < yin->halfBufferSize) {
 299              		.loc 1 127 0
 300 000a 4A1C     		adds	r2, r1, #1
 301 000c B0F90240 		ldrsh	r4, [r0, #2]
 302 0010 A242     		cmp	r2, r4
 303 0012 27DA     		bge	.L37
 128:Src/pitch.c   **** 		x2 = tauEstimate + 1;
 304              		.loc 1 128 0
 305 0014 12B2     		sxth	r2, r2
 306              	.LVL33:
 307              	.L28:
 129:Src/pitch.c   **** 	} 
 130:Src/pitch.c   **** 	else {
 131:Src/pitch.c   **** 		x2 = tauEstimate;
 132:Src/pitch.c   **** 	}
 133:Src/pitch.c   **** 
 134:Src/pitch.c   **** 	/* Algorithm to parabolically interpolate the shift value tau to find a better estimate */
 135:Src/pitch.c   **** 	if (x0 == tauEstimate) {
 308              		.loc 1 135 0
 309 0016 8B42     		cmp	r3, r1
 310 0018 26D0     		beq	.L43
 136:Src/pitch.c   **** 		if (yin->yinBuffer[tauEstimate] <= yin->yinBuffer[x2]) {
 137:Src/pitch.c   **** 			betterTau = tauEstimate;
 138:Src/pitch.c   **** 		} 
 139:Src/pitch.c   **** 		else {
 140:Src/pitch.c   **** 			betterTau = x2;
 141:Src/pitch.c   **** 		}
ARM GAS  /var/folders/k_/r2bh2pj93_jff4n9gmtn9jvr0000gn/T//ccVqBKYL.s 			page 9


 142:Src/pitch.c   **** 	} 
 143:Src/pitch.c   **** 	else if (x2 == tauEstimate) {
 311              		.loc 1 143 0
 312 001a 8A42     		cmp	r2, r1
 313 001c 3BD0     		beq	.L44
 314              	.LBB2:
 144:Src/pitch.c   **** 		if (yin->yinBuffer[tauEstimate] <= yin->yinBuffer[x0]) {
 145:Src/pitch.c   **** 			betterTau = tauEstimate;
 146:Src/pitch.c   **** 		} 
 147:Src/pitch.c   **** 		else {
 148:Src/pitch.c   **** 			betterTau = x0;
 149:Src/pitch.c   **** 		}
 150:Src/pitch.c   **** 	} 
 151:Src/pitch.c   **** 	else {
 152:Src/pitch.c   **** 		float s0, s1, s2;
 153:Src/pitch.c   **** 		s0 = yin->yinBuffer[x0];
 315              		.loc 1 153 0
 316 001e 00EB8303 		add	r3, r0, r3, lsl #2
 317              	.LVL34:
 318 0022 D3ED016A 		vldr.32	s13, [r3, #4]
 319              	.LVL35:
 154:Src/pitch.c   **** 		s1 = yin->yinBuffer[tauEstimate];
 320              		.loc 1 154 0
 321 0026 00EB8103 		add	r3, r0, r1, lsl #2
 322 002a 93ED017A 		vldr.32	s14, [r3, #4]
 323              	.LVL36:
 155:Src/pitch.c   **** 		s2 = yin->yinBuffer[x2];
 324              		.loc 1 155 0
 325 002e 00EB8200 		add	r0, r0, r2, lsl #2
 326              	.LVL37:
 327 0032 D0ED017A 		vldr.32	s15, [r0, #4]
 328              	.LVL38:
 156:Src/pitch.c   **** 		// fixed AUBIO implementation, thanks to Karl Helgason:
 157:Src/pitch.c   **** 		// (2.0f * s1 - s2 - s0) was incorrectly multiplied with -1
 158:Src/pitch.c   **** 		betterTau = tauEstimate + (s2 - s0) / (2 * (2 * s1 - s2 - s0));
 329              		.loc 1 158 0
 330 0036 06EE101A 		vmov	s12, r1	@ int
 331 003a B8EEC60A 		vcvt.f32.s32	s0, s12
 332 003e 37EEE66A 		vsub.f32	s12, s15, s13
 333 0042 37EE077A 		vadd.f32	s14, s14, s14
 334              	.LVL39:
 335 0046 77EE677A 		vsub.f32	s15, s14, s15
 336              	.LVL40:
 337 004a 77EEE67A 		vsub.f32	s15, s15, s13
 338 004e 77EEA77A 		vadd.f32	s15, s15, s15
 339 0052 86EE277A 		vdiv.f32	s14, s12, s15
 340 0056 30EE070A 		vadd.f32	s0, s0, s14
 341              	.LVL41:
 342              	.L26:
 343              	.LBE2:
 159:Src/pitch.c   **** 	}
 160:Src/pitch.c   **** 
 161:Src/pitch.c   **** 
 162:Src/pitch.c   **** 	return betterTau;
 163:Src/pitch.c   **** }
 344              		.loc 1 163 0
 345 005a 5DF8044B 		ldr	r4, [sp], #4
ARM GAS  /var/folders/k_/r2bh2pj93_jff4n9gmtn9jvr0000gn/T//ccVqBKYL.s 			page 10


 346              	.LCFI6:
 347              		.cfi_remember_state
 348              		.cfi_restore 4
 349              		.cfi_def_cfa_offset 0
 350 005e 7047     		bx	lr
 351              	.LVL42:
 352              	.L36:
 353              	.LCFI7:
 354              		.cfi_restore_state
 120:Src/pitch.c   **** 	} 
 355              		.loc 1 120 0
 356 0060 0B46     		mov	r3, r1
 357 0062 D2E7     		b	.L27
 358              	.LVL43:
 359              	.L37:
 131:Src/pitch.c   **** 	}
 360              		.loc 1 131 0
 361 0064 0A46     		mov	r2, r1
 362 0066 D6E7     		b	.L28
 363              	.LVL44:
 364              	.L43:
 136:Src/pitch.c   **** 			betterTau = tauEstimate;
 365              		.loc 1 136 0
 366 0068 00EB8103 		add	r3, r0, r1, lsl #2
 367              	.LVL45:
 368 006c 93ED017A 		vldr.32	s14, [r3, #4]
 369 0070 00EB8200 		add	r0, r0, r2, lsl #2
 370              	.LVL46:
 371 0074 D0ED017A 		vldr.32	s15, [r0, #4]
 372 0078 B4EEE77A 		vcmpe.f32	s14, s15
 373 007c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 374 0080 04D8     		bhi	.L40
 137:Src/pitch.c   **** 		} 
 375              		.loc 1 137 0
 376 0082 07EE901A 		vmov	s15, r1	@ int
 377 0086 B8EEE70A 		vcvt.f32.s32	s0, s15
 378              	.LVL47:
 379 008a E6E7     		b	.L26
 380              	.LVL48:
 381              	.L40:
 140:Src/pitch.c   **** 		}
 382              		.loc 1 140 0
 383 008c 07EE902A 		vmov	s15, r2	@ int
 384 0090 B8EEE70A 		vcvt.f32.s32	s0, s15
 385              	.LVL49:
 386 0094 E1E7     		b	.L26
 387              	.LVL50:
 388              	.L44:
 144:Src/pitch.c   **** 			betterTau = tauEstimate;
 389              		.loc 1 144 0
 390 0096 00EB8102 		add	r2, r0, r1, lsl #2
 391              	.LVL51:
 392 009a 92ED017A 		vldr.32	s14, [r2, #4]
 393 009e 00EB8300 		add	r0, r0, r3, lsl #2
 394              	.LVL52:
 395 00a2 D0ED017A 		vldr.32	s15, [r0, #4]
 396 00a6 B4EEE77A 		vcmpe.f32	s14, s15
ARM GAS  /var/folders/k_/r2bh2pj93_jff4n9gmtn9jvr0000gn/T//ccVqBKYL.s 			page 11


 397 00aa F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 398 00ae 04D8     		bhi	.L41
 145:Src/pitch.c   **** 		} 
 399              		.loc 1 145 0
 400 00b0 07EE901A 		vmov	s15, r1	@ int
 401 00b4 B8EEE70A 		vcvt.f32.s32	s0, s15
 402              	.LVL53:
 403 00b8 CFE7     		b	.L26
 404              	.LVL54:
 405              	.L41:
 148:Src/pitch.c   **** 		}
 406              		.loc 1 148 0
 407 00ba 07EE903A 		vmov	s15, r3	@ int
 408 00be B8EEE70A 		vcvt.f32.s32	s0, s15
 409              	.LVL55:
 410 00c2 CAE7     		b	.L26
 411              		.cfi_endproc
 412              	.LFE129:
 414              		.section	.text.Yin_getPitch,"ax",%progbits
 415              		.align	1
 416              		.global	Yin_getPitch
 417              		.syntax unified
 418              		.thumb
 419              		.thumb_func
 420              		.fpu fpv4-sp-d16
 422              	Yin_getPitch:
 423              	.LFB130:
 164:Src/pitch.c   **** 
 165:Src/pitch.c   **** 
 166:Src/pitch.c   **** 
 167:Src/pitch.c   **** 
 168:Src/pitch.c   **** 
 169:Src/pitch.c   **** /* ------------------------------------------------------------------------------------------
 170:Src/pitch.c   **** ---------------------------------------------------------------------------- PUBLIC FUNCTIONS
 171:Src/pitch.c   **** -------------------------------------------------------------------------------------------*/
 172:Src/pitch.c   **** 
 173:Src/pitch.c   **** /**
 174:Src/pitch.c   ****  * Runs the Yin pitch detection algortihm
 175:Src/pitch.c   ****  * @param  yin    Initialised Yin object
 176:Src/pitch.c   ****  * @param  buffer Buffer of samples to analyse
 177:Src/pitch.c   ****  * @return        Fundamental frequency of the signal in Hz. Returns -1 if pitch can't be found
 178:Src/pitch.c   ****  */
 179:Src/pitch.c   **** float Yin_getPitch(float* buffer, uint16_t bufferSize, float threshold, bool fft){
 424              		.loc 1 179 0
 425              		.cfi_startproc
 426              		@ args = 0, pretend = 0, frame = 8
 427              		@ frame_needed = 0, uses_anonymous_args = 0
 428              	.LVL56:
 180:Src/pitch.c   **** 
 181:Src/pitch.c   ****   if(bufferSize > MAXIMUM_SAMPLESIZE) {
 429              		.loc 1 181 0
 430 0000 B1F5806F 		cmp	r1, #1024
 431 0004 02D9     		bls	.L53
 182:Src/pitch.c   ****     return -1;
 432              		.loc 1 182 0
 433 0006 BFEE000A 		vmov.f32	s0, #-1.0e+0
 434              	.LVL57:
ARM GAS  /var/folders/k_/r2bh2pj93_jff4n9gmtn9jvr0000gn/T//ccVqBKYL.s 			page 12


 183:Src/pitch.c   ****   }
 184:Src/pitch.c   **** 
 185:Src/pitch.c   **** 	yinobject.bufferSize = bufferSize;
 186:Src/pitch.c   **** 	yinobject.halfBufferSize = bufferSize / 2;
 187:Src/pitch.c   **** 	yinobject.probability = 0.0;
 188:Src/pitch.c   **** 	yinobject.threshold = threshold;
 189:Src/pitch.c   **** 
 190:Src/pitch.c   **** 	volatile int16_t tauEstimate = -1;
 191:Src/pitch.c   **** 	float pitchInHertz = -1;
 192:Src/pitch.c   **** 	
 193:Src/pitch.c   **** 	/* Step 1: Calculates the squared difference of the signal with a shifted version of itself. */
 194:Src/pitch.c   ****   Yin_difference(&yinobject, buffer);
 195:Src/pitch.c   **** 
 196:Src/pitch.c   ****   
 197:Src/pitch.c   ****   
 198:Src/pitch.c   ****   /* Step 2: Calculate the cumulative mean on the normalised difference calculated in step 1 */
 199:Src/pitch.c   **** 	Yin_cumulativeMeanNormalizedDifference(&yinobject);
 200:Src/pitch.c   **** 	
 201:Src/pitch.c   **** 	/* Step 3: Search through the normalised cumulative mean array and find values that are over the t
 202:Src/pitch.c   **** 	tauEstimate = Yin_absoluteThreshold(&yinobject);
 203:Src/pitch.c   **** 	
 204:Src/pitch.c   **** 	/* Step 5: Interpolate the shift value (tau) to improve the pitch estimate. */
 205:Src/pitch.c   **** 	if(tauEstimate != -1){
 206:Src/pitch.c   **** 		pitchInHertz = YIN_SAMPLING_RATE / Yin_parabolicInterpolation(&yinobject, tauEstimate);
 207:Src/pitch.c   **** 	}
 208:Src/pitch.c   **** 	
 209:Src/pitch.c   **** 	return pitchInHertz;
 210:Src/pitch.c   **** }
 435              		.loc 1 210 0
 436 000a 7047     		bx	lr
 437              	.LVL58:
 438              	.L53:
 179:Src/pitch.c   **** 
 439              		.loc 1 179 0
 440 000c 10B5     		push	{r4, lr}
 441              	.LCFI8:
 442              		.cfi_def_cfa_offset 8
 443              		.cfi_offset 4, -8
 444              		.cfi_offset 14, -4
 445 000e 82B0     		sub	sp, sp, #8
 446              	.LCFI9:
 447              		.cfi_def_cfa_offset 16
 448 0010 0B46     		mov	r3, r1
 449 0012 0146     		mov	r1, r0
 450              	.LVL59:
 185:Src/pitch.c   **** 	yinobject.halfBufferSize = bufferSize / 2;
 451              		.loc 1 185 0
 452 0014 174C     		ldr	r4, .L54
 453 0016 2380     		strh	r3, [r4]	@ movhi
 186:Src/pitch.c   **** 	yinobject.probability = 0.0;
 454              		.loc 1 186 0
 455 0018 5B08     		lsrs	r3, r3, #1
 456 001a 6380     		strh	r3, [r4, #2]	@ movhi
 187:Src/pitch.c   **** 	yinobject.threshold = threshold;
 457              		.loc 1 187 0
 458 001c 04F60403 		addw	r3, r4, #2052
 459 0020 0022     		movs	r2, #0
ARM GAS  /var/folders/k_/r2bh2pj93_jff4n9gmtn9jvr0000gn/T//ccVqBKYL.s 			page 13


 460              	.LVL60:
 461 0022 1A60     		str	r2, [r3]	@ float
 188:Src/pitch.c   **** 
 462              		.loc 1 188 0
 463 0024 04F60803 		addw	r3, r4, #2056
 464 0028 83ED000A 		vstr.32	s0, [r3]
 190:Src/pitch.c   **** 	float pitchInHertz = -1;
 465              		.loc 1 190 0
 466 002c 4FF6FF73 		movw	r3, #65535
 467 0030 ADF80630 		strh	r3, [sp, #6]	@ movhi
 468              	.LVL61:
 194:Src/pitch.c   **** 
 469              		.loc 1 194 0
 470 0034 2046     		mov	r0, r4
 471              	.LVL62:
 472 0036 FFF7FEFF 		bl	Yin_difference
 473              	.LVL63:
 199:Src/pitch.c   **** 	
 474              		.loc 1 199 0
 475 003a 2046     		mov	r0, r4
 476 003c FFF7FEFF 		bl	Yin_cumulativeMeanNormalizedDifference
 477              	.LVL64:
 202:Src/pitch.c   **** 	
 478              		.loc 1 202 0
 479 0040 2046     		mov	r0, r4
 480 0042 FFF7FEFF 		bl	Yin_absoluteThreshold
 481              	.LVL65:
 482 0046 ADF80600 		strh	r0, [sp, #6]	@ movhi
 205:Src/pitch.c   **** 		pitchInHertz = YIN_SAMPLING_RATE / Yin_parabolicInterpolation(&yinobject, tauEstimate);
 483              		.loc 1 205 0
 484 004a BDF80630 		ldrh	r3, [sp, #6]
 485 004e 1BB2     		sxth	r3, r3
 486 0050 B3F1FF3F 		cmp	r3, #-1
 487 0054 0BD0     		beq	.L48
 206:Src/pitch.c   **** 	}
 488              		.loc 1 206 0
 489 0056 BDF80610 		ldrh	r1, [sp, #6]
 490 005a 09B2     		sxth	r1, r1
 491 005c 2046     		mov	r0, r4
 492 005e FFF7FEFF 		bl	Yin_parabolicInterpolation
 493              	.LVL66:
 494 0062 DFED057A 		vldr.32	s15, .L54+4
 495 0066 87EE800A 		vdiv.f32	s0, s15, s0
 496              	.LVL67:
 497              	.L45:
 498              		.loc 1 210 0
 499 006a 02B0     		add	sp, sp, #8
 500              	.LCFI10:
 501              		.cfi_remember_state
 502              		.cfi_def_cfa_offset 8
 503              		@ sp needed
 504 006c 10BD     		pop	{r4, pc}
 505              	.LVL68:
 506              	.L48:
 507              	.LCFI11:
 508              		.cfi_restore_state
 191:Src/pitch.c   **** 	
ARM GAS  /var/folders/k_/r2bh2pj93_jff4n9gmtn9jvr0000gn/T//ccVqBKYL.s 			page 14


 509              		.loc 1 191 0
 510 006e BFEE000A 		vmov.f32	s0, #-1.0e+0
 511 0072 FAE7     		b	.L45
 512              	.L55:
 513              		.align	2
 514              	.L54:
 515 0074 00000000 		.word	yinobject
 516 0078 0050C346 		.word	1187205120
 517              		.cfi_endproc
 518              	.LFE130:
 520              		.section	.text.Yin_getProbability,"ax",%progbits
 521              		.align	1
 522              		.global	Yin_getProbability
 523              		.syntax unified
 524              		.thumb
 525              		.thumb_func
 526              		.fpu fpv4-sp-d16
 528              	Yin_getProbability:
 529              	.LFB131:
 211:Src/pitch.c   **** 
 212:Src/pitch.c   **** /**
 213:Src/pitch.c   ****  * Certainty of the pitch found 
 214:Src/pitch.c   ****  * @param  yin Yin object that has been run over a buffer
 215:Src/pitch.c   ****  * @return     Returns the certainty of the note found as a decimal (i.e 0.3 is 30%)
 216:Src/pitch.c   ****  */
 217:Src/pitch.c   **** float Yin_getProbability(){
 530              		.loc 1 217 0
 531              		.cfi_startproc
 532              		@ args = 0, pretend = 0, frame = 0
 533              		@ frame_needed = 0, uses_anonymous_args = 0
 534              		@ link register save eliminated.
 218:Src/pitch.c   **** 	return yinobject.probability;
 219:Src/pitch.c   **** }
 535              		.loc 1 219 0
 536 0000 014B     		ldr	r3, .L57
 537 0002 93ED000A 		vldr.32	s0, [r3]
 538 0006 7047     		bx	lr
 539              	.L58:
 540              		.align	2
 541              	.L57:
 542 0008 04080000 		.word	yinobject+2052
 543              		.cfi_endproc
 544              	.LFE131:
 546              		.comm	yinobject,2060,4
 547              		.text
 548              	.Letext0:
 549              		.file 2 "/usr/local/Cellar/arm-none-eabi-gcc/7-2018-q2-update/gcc/arm-none-eabi/include/machine/_d
 550              		.file 3 "/usr/local/Cellar/arm-none-eabi-gcc/7-2018-q2-update/gcc/arm-none-eabi/include/sys/lock.h
 551              		.file 4 "/usr/local/Cellar/arm-none-eabi-gcc/7-2018-q2-update/gcc/arm-none-eabi/include/sys/_types
 552              		.file 5 "/usr/local/Cellar/arm-none-eabi-gcc/7-2018-q2-update/gcc/lib/gcc/arm-none-eabi/7.3.1/incl
 553              		.file 6 "/usr/local/Cellar/arm-none-eabi-gcc/7-2018-q2-update/gcc/arm-none-eabi/include/sys/reent.
 554              		.file 7 "/usr/local/Cellar/arm-none-eabi-gcc/7-2018-q2-update/gcc/arm-none-eabi/include/math.h"
 555              		.file 8 "/usr/local/Cellar/arm-none-eabi-gcc/7-2018-q2-update/gcc/arm-none-eabi/include/sys/_stdin
 556              		.file 9 "Inc/pitch.h"
 557              		.file 10 "Drivers/CMSIS/Include/core_cm4.h"
 558              		.file 11 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/system_stm32f3xx.h"
 559              		.file 12 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f373xc.h"
ARM GAS  /var/folders/k_/r2bh2pj93_jff4n9gmtn9jvr0000gn/T//ccVqBKYL.s 			page 15


 560              		.file 13 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
 561              		.file 14 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
 562              		.file 15 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_i2c.h"
 563              		.file 16 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
 564              		.file 17 "Inc/ips_font.h"
 565              		.file 18 "Inc/ssd1306.h"
ARM GAS  /var/folders/k_/r2bh2pj93_jff4n9gmtn9jvr0000gn/T//ccVqBKYL.s 			page 16


DEFINED SYMBOLS
                            *ABS*:0000000000000000 pitch.c
/var/folders/k_/r2bh2pj93_jff4n9gmtn9jvr0000gn/T//ccVqBKYL.s:18     .text.Yin_difference:0000000000000000 $t
/var/folders/k_/r2bh2pj93_jff4n9gmtn9jvr0000gn/T//ccVqBKYL.s:25     .text.Yin_difference:0000000000000000 Yin_difference
/var/folders/k_/r2bh2pj93_jff4n9gmtn9jvr0000gn/T//ccVqBKYL.s:106    .text.Yin_cumulativeMeanNormalizedDifference:0000000000000000 $t
/var/folders/k_/r2bh2pj93_jff4n9gmtn9jvr0000gn/T//ccVqBKYL.s:113    .text.Yin_cumulativeMeanNormalizedDifference:0000000000000000 Yin_cumulativeMeanNormalizedDifference
/var/folders/k_/r2bh2pj93_jff4n9gmtn9jvr0000gn/T//ccVqBKYL.s:158    .text.Yin_cumulativeMeanNormalizedDifference:000000000000003c $d
/var/folders/k_/r2bh2pj93_jff4n9gmtn9jvr0000gn/T//ccVqBKYL.s:163    .text.Yin_absoluteThreshold:0000000000000000 $t
/var/folders/k_/r2bh2pj93_jff4n9gmtn9jvr0000gn/T//ccVqBKYL.s:170    .text.Yin_absoluteThreshold:0000000000000000 Yin_absoluteThreshold
/var/folders/k_/r2bh2pj93_jff4n9gmtn9jvr0000gn/T//ccVqBKYL.s:271    .text.Yin_parabolicInterpolation:0000000000000000 $t
/var/folders/k_/r2bh2pj93_jff4n9gmtn9jvr0000gn/T//ccVqBKYL.s:278    .text.Yin_parabolicInterpolation:0000000000000000 Yin_parabolicInterpolation
/var/folders/k_/r2bh2pj93_jff4n9gmtn9jvr0000gn/T//ccVqBKYL.s:415    .text.Yin_getPitch:0000000000000000 $t
/var/folders/k_/r2bh2pj93_jff4n9gmtn9jvr0000gn/T//ccVqBKYL.s:422    .text.Yin_getPitch:0000000000000000 Yin_getPitch
/var/folders/k_/r2bh2pj93_jff4n9gmtn9jvr0000gn/T//ccVqBKYL.s:515    .text.Yin_getPitch:0000000000000074 $d
                            *COM*:000000000000080c yinobject
/var/folders/k_/r2bh2pj93_jff4n9gmtn9jvr0000gn/T//ccVqBKYL.s:521    .text.Yin_getProbability:0000000000000000 $t
/var/folders/k_/r2bh2pj93_jff4n9gmtn9jvr0000gn/T//ccVqBKYL.s:528    .text.Yin_getProbability:0000000000000000 Yin_getProbability
/var/folders/k_/r2bh2pj93_jff4n9gmtn9jvr0000gn/T//ccVqBKYL.s:542    .text.Yin_getProbability:0000000000000008 $d

NO UNDEFINED SYMBOLS
